// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  imageUrl    String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  FEATURED
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String?
  price           Float
  discountedPrice Float?
  stock           Int           @default(0)
  salesCount      Int           @default(0)
  sku             String        @unique
  imageUrl        String?
  status          ProductStatus @default(ACTIVE)

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  orderItems OrderItem[]
  cartItems  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model CartItem {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  totalPrice      Float
  status          OrderStatus @default(PENDING)
  paymentMethod   String?
  shippingAddress String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id            String  @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          Role    @default(USER)

  createdAt DateTime
  updatedAt DateTime
  sessions  Session[]
  accounts  Account[]

  cartItems CartItem[]
  orders    Order[]

  @@unique([email])
  @@map("user")
}
